import os
import sys
import math
import random
import time
import tty
import termios

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞—Ä—Ç—ã –∏ —ç–∫—Ä–∞–Ω–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî
MAP_W, MAP_H = 20, 20         # —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
SCREEN_W, SCREEN_H = 60, 24   # —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Å–æ–ª–∏ (–∫–æ–ª–æ–Ω–∫–∏ √ó —Å—Ç—Ä–æ–∫–∏)
FOV = math.pi / 3             # —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ (60¬∞)
DEPTH = 16                    # –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ‚Äî‚Äî‚Äî‚Äî‚Äî
def generate_map():
    m = [['#'] * MAP_W for _ in range(MAP_H)]
    for y in range(1, MAP_H-1):
        for x in range(1, MAP_W-1):
            m[y][x] = '.' if random.random() > 0.3 else '#'
    return m

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî
def getch():
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    return ch

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
world_map = generate_map()
# –ù–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–æ—á–∫—É
def find_free():
    while True:
        x, y = random.randint(1, MAP_W-2), random.randint(1, MAP_H-2)
        if world_map[y][x] == '.':
            return x, y

player_x, player_y = find_free()
player_a = 0.0  # —É–≥–æ–ª –≤–∑–≥–ª—è–¥–∞

# –ö–ª—é—á–∏ –∏ –≤—ã—Ö–æ–¥
NUM_KEYS = 3
keys = set(find_free() for _ in range(NUM_KEYS))
exit_pos = find_free()
collected = 0

# ‚Äî‚Äî‚Äî‚Äî‚Äî –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞–¥—Ä–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî
def render_frame():
    os.system('cls' if os.name=='nt' else 'clear')

    # –†–∏—Å—É–µ–º –ø—Å–µ–≤–¥–æ-3D
    for cols in range(SCREEN_W):
        ray_angle = (player_a - FOV/2.0) + (cols / SCREEN_W) * FOV
        distance_to_wall = 0
        hit = False

        eye_x = math.sin(ray_angle)
        eye_y = math.cos(ray_angle)

        # —à–∞–≥–∞–µ–º –ø–æ –ª—É—á—É
        while not hit and distance_to_wall < DEPTH:
            distance_to_wall += 0.1
            tx = int(player_x + eye_x * distance_to_wall)
            ty = int(player_y + eye_y * distance_to_wall)
            if tx < 0 or tx >= MAP_W or ty < 0 or ty >= MAP_H:
                hit = True
                distance_to_wall = DEPTH
            elif world_map[ty][tx] == '#':
                hit = True

        # –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω—ã
        ceiling = int((SCREEN_H / 2.0) - SCREEN_H / distance_to_wall)
        floor = SCREEN_H - ceiling

        # –≤—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        shade = ' '
        if distance_to_wall <= DEPTH / 4.0:      shade = '‚ñà'
        elif distance_to_wall < DEPTH / 3.0:     shade = '‚ñì'
        elif distance_to_wall < DEPTH / 2.0:     shade = '‚ñí'
        elif distance_to_wall < DEPTH:           shade = '¬∑'
        else:                                    shade = ' '

        # —Ä–∏—Å—É–µ–º —Å—Ç–æ–ª–±–µ—Ü
        for row in range(SCREEN_H):
            if row < ceiling:
                sys.stdout.write(' ')
            elif row > ceiling and row <= floor:
                sys.stdout.write(shade)
            else:
                sys.stdout.write('.')
        sys.stdout.write('\n')

    # –°—Ç–∞—Ç—É—Å –∏ –º–∏–Ω–∏-–∫–∞—Ä—Ç–∞
    print(f"–ö–ª—é—á–∏: {collected}/{NUM_KEYS}    –ü—Ä–∏—Ü–µ–ª: (^)\n")
    for y in range(MAP_H):
        line = ''
        for x in range(MAP_W):
            if int(player_x)==x and int(player_y)==y:
                line += 'P'
            elif (x, y) in keys:
                line += 'K'
            elif (x, y) == exit_pos:
                line += 'E'
            else:
                line += world_map[y][x]
        print(line)
    print("\nW/S ‚Äî –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ | A/D ‚Äî –ø–æ–≤–æ—Ä–æ—Ç | Q ‚Äî –≤—ã—Ö–æ–¥")

# ‚Äî‚Äî‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã ‚Äî‚Äî‚Äî‚Äî‚Äî
def game_loop():
    global player_x, player_y, player_a, collected

    while True:
        render_frame()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑—è—Ç–∏–µ –∫–ª—é—á–∞ / –≤—ã—Ö–æ–¥
        pos = (int(player_x), int(player_y))
        if pos in keys:
            keys.remove(pos)
            collected += 1
        if collected == NUM_KEYS and pos == exit_pos:
            print("\nüéâ –í—Å–µ –∫–ª—é—á–∏ —Å–æ–±—Ä–∞–Ω—ã –∏ –≤—ã—Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ")
            break

        cmd = getch().lower()
        if cmd == 'q':
            break
        # –¥–≤–∏–∂–µ–Ω–∏–µ
        elif cmd == 'w':
            player_x += math.sin(player_a) * 0.5
            player_y += math.cos(player_a) * 0.5
            if world_map[int(player_y)][int(player_x)] == '#':
                player_x -= math.sin(player_a) * 0.5
                player_y -= math.cos(player_a) * 0.5
        elif cmd == 's':
            player_x -= math.sin(player_a) * 0.5
            player_y -= math.cos(player_a) * 0.5
            if world_map[int(player_y)][int(player_x)] == '#':
                player_x += math.sin(player_a) * 0.5
                player_y += math.cos(player_a) * 0.5
        # –ø–æ–≤–æ—Ä–æ—Ç
        elif cmd == 'a':
            player_a -= 0.1
        elif cmd == 'd':
            player_a += 0.1

if __name__ == "__main__":
    try:
        game_loop()
    except KeyboardInterrupt:
        pass
